#!/usr/bin/env ruby

module RubyRC
  extend self

  # Quick benchmarking
  def bench(n = 100, &block)
    require 'benchmark'

    Benchmark.bmbm do |b|
      b.report {n.times &block}
    end
    nil
  end

  # "Seed" structures to play with

  def abc
    ('a'..'z').to_a
  end

  def gen_rand(n = 10)
    rand 1..n
  end

  def gen_array(n = 10)
    (1..n).to_a
  end

  def gen_rand_array(n = 10, r = 10)
    Array.new(n) { rand 1..r }
  end

  def gen_hash(n=5)
    abc.take(n).reduce({}) do |acc, letter|
      acc[letter.to_sym] = letter
      acc
    end
  end

  # And some handy aliases
  GEN_ALIASES = {
    :r  => :gen_rand,
    :a  => :gen_array,
    :rr => :gen_rand_array,
    :h  => :gen_hash
  }

  def self.included(obj)

    # Set aliases but don't override anything.
    # TODO :register_alias, :aliases_banner perhaps?
    GEN_ALIASES.each do |_a, _m|
      unless (obj.instance_eval(_a.to_s) rescue false)
        obj.send :alias_method, _a, _m
      end
    end
  end
end
